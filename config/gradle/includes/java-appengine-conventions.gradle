/*
the following must be added to the main build script

buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.google.appengine:gradle-appengine-plugin:1.9.30'
    }
}
*/
apply plugin: 'war'
apply plugin: 'appengine'

apply from: "${rootProject.projectDir}/config/gradle/includes/java-conventions.gradle"
apply from: "${rootProject.projectDir}/config/gradle/includes/guice-conventions.gradle"
apply from: "${rootProject.projectDir}/config/gradle/includes/jersey-conventions.gradle"

ext {
    gaeVersion = '1.9.27'
    googleApiVersion = '1.17.0-rc'
    guavaVersion = '14.0.1'
    httpClientVersion = '4.2.2'
    injectVersion = '1'
    jodaTimeVersion = '2.2'
    servletApiVersion = '2.5'
    slf4jVersion = '1.6.6'
    thymeleafVersion = '2.0.16'
    objectifyVersion = '4.0rc1'
    apacheCommonsVersion = '3.1'

}

configurations {
    all*.exclude group: "org.mortbay.jetty"

    runtime.exclude group: "org.sonatype.sisu.inject", module: "cglib"
    runtime.exclude group: "commons-logging", module: "commons-logging"
    runtime.exclude group: "asm", module: "asm"
    runtime.exclude group: "org.javassist", module: "javassist"

    doclet
    docletExtSrc
}

dependencies {

    compile "org.slf4j:slf4j-jdk14:1.7.5"
    compile "org.apache.httpcomponents:httpclient:$httpClientVersion"
    compile "org.apache.commons:commons-io:1.3.2"
    compile "commons-lang:commons-lang:2.6"


    // App Engine SDK
    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion"
    compile "com.google.appengine:appengine-api-labs:$gaeVersion" // required for AppStats

    compile "com.google.http-client:google-http-client-gson:$googleApiVersion"

    // App Engine SDK
    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion"
    compile "com.google.appengine:appengine-tools-sdk:$gaeVersion"
    compile "com.google.appengine:appengine-api-labs:$gaeVersion"
    //Google Cloud Storage API
    compile 'com.google.appengine.tools:appengine-gcs-client:0.5'


    compile "org.slf4j:jcl-over-slf4j:1.7.5"
    compile "commons-codec:commons-codec:1.8"

    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion"

    compile "javax.servlet:servlet-api:$servletApiVersion"

    compile "org.thymeleaf:thymeleaf:$thymeleafVersion"
    compile("com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute:1.2") { transitive = false }

    compile "joda-time:joda-time:$jodaTimeVersion"

    //specify the App Engine SDK Version to use.
    appengineSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"

    //for Swagger
    doclet ("com.carma:swagger-doclet:1.0.3")
    compile ('com.wordnik:swagger-core:1.5.+')


}

appengine {
    downloadSdk = true;

    appcfg {
        oauth2 = true

        if (project.hasProperty("debug")) {
            jvmFlags =['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000']
        }

    }

//    app {
//        id = "smart-content-v2-dev"
//
////            if (project.hasProperty("appId")) {
////                id = project.appId
////            }
//    }


}



task extractDocletExternalSources(type: Copy) {
    configurations.docletExtSrc.resolve().each { from zipTree(it.getAbsolutePath()) }
    into file("${buildDir}/shared-src")
}

task deleteDocletExternalSources(type: Delete) {
    delete file("${buildDir}/shared-src")
}

task generateApiDocs(type: Javadoc, dependsOn: extractDocletExternalSources) {
    source = sourceSets.main.allJava
            .plus(fileTree(buildDir.toString() + '/shared-src').include('**/*.java'))

    classpath = configurations.compile
    destinationDir = reporting.file("rest-api-docs")

    options.classpath = configurations.doclet.files.asType(List)
    options.docletpath = configurations.doclet.files.asType(List)
    options.doclet = "com.carma.swagger.doclet.ServiceDoclet"

//    options.addStringOption("apiVersion", getArtifactVersion())
    options.addStringOption("docBasePath", "/rest-api-docs")
    options.addStringOption("apiBasePath", "/")
//    options.addStringOption("docBasePath", "http://localhost:8080/rest-api-docs")
//    options.addStringOption("apiBasePath", "http://localhost:8080")
//    options.addBooleanOption("skipUiFiles", true)
//    options.addStringOption("apiAuthorizationsFile", "${project.rootDir}/docs/swagger-jaxrs-doclet/api_auth.json")
    options.addStringOption("apiInfoFile", "${project.rootDir}/config/swagger/api_info.json")
    options.addBooleanOption("sortResourcesByPath", true)

    options.addBooleanOption("disableDeprecatedResourceClassExclusion", true)
    options.addBooleanOption("disableDeprecatedModelClassExclusion", true)
    options.addBooleanOption("disableDeprecatedOperationExclusion", true)
    options.addBooleanOption("disableDeprecatedFieldExclusion", true)
    options.addBooleanOption("disableDeprecatedParamExclusion", true)

}

task archiveApiDocs(type: Zip) {
    from ("$project.buildDir/reports/rest-api-docs/")
    include '*.json'
    destinationDir file("$project.buildDir")
    archiveName 'swaggerApiDocs.zip'
}

task generateSDKFromDocs(type: Exec, dependsOn: generateApiDocs) {
    commandLine './generateSDKFromDocs.sh', "$project.buildDir"
}

generateApiDocs.doLast {
    tasks.deleteDocletExternalSources.execute()
    tasks.archiveApiDocs.execute()
}

war {
    from "$project.buildDir/reports"
}

appengineExplodeApp.dependsOn generateApiDocs

generateApiDocs.outputs.upToDateWhen({return false; })



